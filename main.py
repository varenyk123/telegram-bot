import os
import logging
import asyncio
from datetime import datetime
from flask import Flask, request, jsonify
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import io
import threading

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
token = os.getenv('TELEGRAM_BOT_TOKEN')
if not token:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    exit(1)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ application
bot = Bot(token=token)
application = Application.builder().token(token).build()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL –¥–ª—è webhook
base_url = os.getenv('RENDER_EXTERNAL_URL', 'https://your-app.onrender.com')
if base_url.endswith('.'):
    base_url = base_url[:-1]
webhook_url = f"{base_url}/webhook/{token}"

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
user_states = {}
user_data = {}

class UserState:
    NONE = 0
    WAITING_FOR_COMPANY = 1
    WAITING_FOR_CONTACT = 2
    WAITING_FOR_WORK_HOURS = 3
    WAITING_FOR_HOURLY_RATE = 4
    WAITING_FOR_DESCRIPTION = 5

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context):
    user_id = update.effective_user.id
    user_states[user_id] = UserState.NONE
    user_data[user_id] = {}
    
    keyboard = [
        [InlineKeyboardButton("üìã –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="create_invoice")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤-—Ñ–∞–∫—Ç—É—Ä.

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF.

–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:
    """
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def help_command(update: Update, context):
    help_text = """
üÜò –î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É:

üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É:
‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫"
‚Ä¢ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º
‚Ä¢ –û—Ç—Ä–∏–º–∞–π—Ç–µ –≥–æ—Ç–æ–≤–∏–π PDF

üí° –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é
    """
    await update.message.reply_text(help_text)

async def cancel_command(update: Update, context):
    user_id = update.effective_user.id
    user_states[user_id] = UserState.NONE
    user_data[user_id] = {}
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

# –û–±—Ä–æ–±–∫–∞ callback queries
async def callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "create_invoice":
        user_states[user_id] = UserState.WAITING_FOR_COMPANY
        user_data[user_id] = {}
        
        await query.edit_message_text(
            "üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É\n\n–ö—Ä–æ–∫ 1/5: –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó:"
        )
        
    elif query.data == "about":
        about_text = """
‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞:

–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤-—Ñ–∞–∫—Ç—É—Ä —É PDF —Ñ–æ—Ä–º–∞—Ç—ñ.

üîß –§—É–Ω–∫—Ü—ñ—ó:
‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç —É PDF
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(about_text, reply_markup=reply_markup)
        
    elif query.data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üìã –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data="create_invoice")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤-—Ñ–∞–∫—Ç—É—Ä.

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF.

–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:
        """
        
        await query.edit_message_text(welcome_text, reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context):
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id not in user_states:
        user_states[user_id] = UserState.NONE
        user_data[user_id] = {}
    
    state = user_states[user_id]
    
    if state == UserState.WAITING_FOR_COMPANY:
        user_data[user_id]['company'] = text
        user_states[user_id] = UserState.WAITING_FOR_CONTACT
        
        await update.message.reply_text(
            "‚úÖ –ù–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n–ö—Ä–æ–∫ 2/5: –í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—Ç–µ–ª–µ—Ñ–æ–Ω, email, –∞–¥—Ä–µ—Å–∞):"
        )
        
    elif state == UserState.WAITING_FOR_CONTACT:
        user_data[user_id]['contact'] = text
        user_states[user_id] = UserState.WAITING_FOR_WORK_HOURS
        
        await update.message.reply_text(
            "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n–ö—Ä–æ–∫ 3/5: –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω:"
        )
        
    elif state == UserState.WAITING_FOR_WORK_HOURS:
        try:
            hours = float(text)
            if hours <= 0:
                raise ValueError("–ì–æ–¥–∏–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
                
            user_data[user_id]['hours'] = hours
            user_states[user_id] = UserState.WAITING_FOR_HOURLY_RATE
            
            await update.message.reply_text(
                "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n–ö—Ä–æ–∫ 4/5: –í–≤–µ–¥—ñ—Ç—å –ø–æ–≥–æ–¥–∏–Ω–Ω—É —Å—Ç–∞–≤–∫—É (—É –≥—Ä–Ω):"
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 8 –∞–±–æ 8.5)"
            )
            
    elif state == UserState.WAITING_FOR_HOURLY_RATE:
        try:
            rate = float(text)
            if rate <= 0:
                raise ValueError("–°—Ç–∞–≤–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
                
            user_data[user_id]['rate'] = rate
            user_states[user_id] = UserState.WAITING_FOR_DESCRIPTION
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
            total = user_data[user_id]['hours'] * rate
            user_data[user_id]['total'] = total
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≥–æ–¥–∏–Ω–Ω—É —Å—Ç–∞–≤–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                f"üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:\n"
                f"‚Ä¢ –ì–æ–¥–∏–Ω–∏: {user_data[user_id]['hours']}\n"
                f"‚Ä¢ –°—Ç–∞–≤–∫–∞: {rate} –≥—Ä–Ω/–≥–æ–¥\n"
                f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω\n\n"
                f"–ö—Ä–æ–∫ 5/5: –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ä–æ–±—ñ—Ç –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–≥–æ—Ç–æ–≤–æ':"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –ø–æ–≥–æ–¥–∏–Ω–Ω—É —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 500 –∞–±–æ 750.50)"
            )
            
    elif state == UserState.WAITING_FOR_DESCRIPTION:
        if text.lower() in ['–≥–æ—Ç–æ–≤–æ', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–æ!']:
            user_data[user_id]['description'] = "–ù–∞–¥–∞–Ω–Ω—è IT –ø–æ—Å–ª—É–≥"
        else:
            user_data[user_id]['description'] = text
            
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF
        try:
            pdf_buffer = create_pdf_invoice(user_data[user_id])
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF
            await context.bot.send_document(
                chat_id=user_id,
                document=pdf_buffer,
                filename=f"invoice_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                caption="‚úÖ –í–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏–π!"
            )
            
            # –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
            user_states[user_id] = UserState.NONE
            user_data[user_id] = {}
            
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üìã –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫", callback_data="create_invoice")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üéâ –†–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF: {e}")
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )
            user_states[user_id] = UserState.NONE
            user_data[user_id] = {}
    else:
        # –°—Ç–∞–Ω –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ
        await update.message.reply_text(
            "‚ùì –ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏."
        )

def create_pdf_invoice(data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF —Ä–∞—Ö—É–Ω–∫—É"""
    buffer = io.BytesIO()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    c.setFont("Helvetica-Bold", 20)
    c.drawString(50, height - 50, "RAHUNOK-FAKTURA")
    
    # –î–∞—Ç–∞
    c.setFont("Helvetica", 12)
    current_date = datetime.now().strftime("%d.%m.%Y")
    c.drawString(50, height - 80, f"Data: {current_date}")
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 120, "Postachalnik:")
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 140, data['company'])
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    lines = data['contact'].split('\n')
    y_pos = height - 160
    for line in lines:
        c.drawString(50, y_pos, line)
        y_pos -= 20
    
    # –û–ø–∏—Å —Ä–æ–±—ñ—Ç
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y_pos - 40, "Opys robit:")
    
    c.setFont("Helvetica", 11)
    c.drawString(50, y_pos - 60, data.get('description', 'Nadannia IT poslug'))
    c.drawString(50, y_pos - 80, f"Kilkist godyn: {data['hours']}")
    c.drawString(50, y_pos - 100, f"Pogodynna stavka: {data['rate']:.2f} grn")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, y_pos - 140, f"ZAGALNA SUMA: {data['total']:.2f} grn")
    
    # –ü—ñ–¥–ø–∏—Å
    c.setFont("Helvetica", 10)
    c.drawString(50, 50, "Diakuiemo za spivpratsiu!")
    
    c.save()
    buffer.seek(0)
    return buffer

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–æ application
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("cancel", cancel_command))
application.add_handler(CallbackQueryHandler(callback_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è event loop
loop = None
loop_thread = None

def run_event_loop():
    """–ó–∞–ø—É—Å–∫ event loop –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    global loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_forever()

def ensure_event_loop():
    """–ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ event loop –∑–∞–ø—É—â–µ–Ω–∏–π"""
    global loop, loop_thread
    if loop is None or not loop.is_running():
        loop_thread = threading.Thread(target=run_event_loop, daemon=True)
        loop_thread.start()
        # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ loop —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
        import time
        time.sleep(0.1)

# Flask –º–∞—Ä—à—Ä—É—Ç–∏
@app.route('/webhook/<token_path>', methods=['POST'])
def webhook(token_path):
    """–û–±—Ä–æ–±–∫–∞ webhook –≤—ñ–¥ Telegram"""
    if token_path != token:
        return "Unauthorized", 401
    
    try:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ event loop –∑–∞–ø—É—â–µ–Ω–∏–π
        ensure_event_loop()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        json_data = request.get_json()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Update –æ–±'—î–∫—Ç–∞
        update = Update.de_json(json_data, bot)
        
        # –û–±—Ä–æ–±–∫–∞ update –≤ event loop
        future = asyncio.run_coroutine_threadsafe(
            application.process_update(update),
            loop
        )
        # –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
        future.result(timeout=30)
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ webhook: {e}")
        return "Error", 500

@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return jsonify({
        "status": "active",
        "bot": "Telegram Invoice Bot",
        "webhook": webhook_url
    })

@app.route('/health')
def health():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è"""
    return jsonify({"status": "healthy"})

async def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook"""
    try:
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ webhook
        await bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ webhook
        await bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
        print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")

def setup_webhook_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook"""
    asyncio.run(setup_webhook())

if __name__ == '__main__':
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
    setup_webhook_sync()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
