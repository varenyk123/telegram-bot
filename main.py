import os
import logging
import json
import io
import asyncio
import threading
from typing import Dict, List

from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.units import inch

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü—ñ –∑–º—ñ–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –Ω–∞ Render
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://your-app.onrender.com

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó.")

if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó.")

# –î–û–î–ê–ô–¢–ï –°–Æ–î–ò –í–ê–®–ï –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ
CONSULTATION_LINK = "https://t.me/meme_pixel"

# –í—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–≤—ñ–∑–∞ (–±–µ–∑ –∑–º—ñ–Ω)
QUESTIONS = [
    {
        "id": 1,
        "text": "üß© 1. –©–æ —Ç–∏ —Ä–æ–±–∏—à, –∫–æ–ª–∏ –≤—Å–µ –π–¥–µ –Ω–µ —Ç–∞–∫, —è–∫ —Ö–æ—Ç—ñ–≤?",
        "options": [
            {"text": "A) –î—É–º–∞—é, —á–æ–º—É —Ç–∞–∫ —Å—Ç–∞–ª–æ—Å—è", "type": "A"},
            {"text": "B) –ü—Ä–æ—Å—Ç–æ –¥—ñ—é –ø–æ-–Ω–æ–≤–æ–º—É", "type": "B"},
            {"text": "C) –ü—Ä–∏—Å–ª—É—Ö–∞—é—Å—å –¥–æ —Å–µ–±–µ", "type": "C"},
            {"text": "D) –¢—Ä–∏–º–∞—é—Å—å –∑–∞ –∑–Ω–∞–π–æ–º—ñ –º–µ–Ω—ñ —Ä–µ—á—ñ", "type": "D"}
        ]
    },
    {
        "id": 2,
        "text": "üß© 2. –©–æ –¥–ª—è —Ç–µ–±–µ –≥–æ–ª–æ–≤–Ω–µ, –∫–æ–ª–∏ —Ç—Ä–µ–±–∞ —â–æ—Å—å –≤–∏—Ä—ñ—à–∏—Ç–∏?",
        "options": [
            {"text": "A) –©–æ–± –±—É–ª–æ –ª–æ–≥—ñ—á–Ω–æ", "type": "A"},
            {"text": "B) –©–æ–± –±—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "type": "B"},
            {"text": "C) –©–æ–± –±—É–ª–æ \"–ø–æ –¥—É—à—ñ\"", "type": "C"},
            {"text": "D) –©–æ–± –±—É–ª–æ –Ω–∞–¥—ñ–π–Ω–æ", "type": "D"}
        ]
    },
    {
        "id": 3,
        "text": "üß© 3. –ö–æ–ª–∏ —Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –∫–∞–π—Ñ—É—î—à?",
        "options": [
            {"text": "A) –ö–æ–ª–∏ —â–æ—Å—å —Ä–æ–∑—É–º—ñ—é", "type": "A"},
            {"text": "B) –ö–æ–ª–∏ —â–æ—Å—å –¥–æ—Å—è–≥–∞—é", "type": "B"},
            {"text": "C) –ö–æ–ª–∏ —Å—Ç–≤–æ—Ä—é—é –∞–±–æ –º—Ä—ñ—é", "type": "C"},
            {"text": "D) –ö–æ–ª–∏ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ —ñ —Å—Ç–∞–±—ñ–ª—å–Ω–æ", "type": "D"}
        ]
    },
    {
        "id": 4,
        "text": "üß© 4. –Ø–∫ —Å—Ç–∞–≤–∏—à—Å—è –¥–æ –∑–º—ñ–Ω —É –∂–∏—Ç—Ç—ñ?",
        "options": [
            {"text": "A) –î—É–º–∞—é, —á–∏ –≤–æ–Ω–æ –º–µ–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å", "type": "A"},
            {"text": "B) –ü—Ä–æ–±—É—é ‚Äî —ñ –±–∞—á—É –≤–∂–µ –ø–æ —Ö–æ–¥—É", "type": "B"},
            {"text": "C) –õ—é–±–ª—é —â–æ—Å—å –Ω–æ–≤–µ", "type": "C"},
            {"text": "D) –£–Ω–∏–∫–∞—é, —è–∫—â–æ –º–æ–∂—É", "type": "D"}
        ]
    },
    {
        "id": 5,
        "text": "üß© 5. –©–æ —Ç–µ–±–µ –Ω–∞–π–±—ñ–ª—å—à–µ \"–∑—É–ø–∏–Ω—è—î\"?",
        "options": [
            {"text": "A) –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –¥—É–º–æ–∫", "type": "A"},
            {"text": "B) –í–∏–≥–æ—Ä–∞–Ω–Ω—è –≤—ñ–¥ –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –≥–æ–Ω–∫–∏", "type": "B"},
            {"text": "C) –ù–∞—Å—Ç—Ä–æ—ó, —â–æ –∑–º—ñ–Ω—é—é—Ç—å—Å—è", "type": "C"},
            {"text": "D) –°—Ç—Ä–∞—Ö –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É", "type": "D"}
        ]
    },
    {
        "id": 6,
        "text": "üß© 6. –©–æ —Ü—ñ–Ω—É—î—à —É –ª—é–¥—è—Ö –Ω–∞–π–±—ñ–ª—å—à–µ?",
        "options": [
            {"text": "A) –£–º—ñ–Ω–Ω—è –º–∏—Å–ª–∏—Ç–∏", "type": "A"},
            {"text": "B) –°–º—ñ–ª–∏–≤—ñ—Å—Ç—å –¥—ñ—è—Ç–∏", "type": "B"},
            {"text": "C) –©–∏—Ä—ñ—Å—Ç—å", "type": "C"},
            {"text": "D) –ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å", "type": "D"}
        ]
    },
    {
        "id": 7,
        "text": "üß© 7. –Ø–∫ —Ç–∏ –∑–∞–∑–≤–∏—á–∞–π —Å—Ç–∞–≤–∏—à —Å–æ–±—ñ —Ü—ñ–ª—ñ?",
        "options": [
            {"text": "A) –ü–ª–∞–Ω—É—é –≤—ñ–¥ –ê –¥–æ –Ø", "type": "A"},
            {"text": "B) –ü—Ä–æ—Å—Ç–æ –π–¥—É —ñ —Ä–æ–±–ª—é", "type": "B"},
            {"text": "C) –ú—Ä—ñ—é ‚Äî –∞ –ø–æ—Ç—ñ–º —Ä—É—Ö–∞—é—Å—å", "type": "C"},
            {"text": "D) –ü–æ–≤—ñ–ª—å–Ω–æ, –∞–ª–µ –≤–ø–µ–≤–Ω–µ–Ω–æ", "type": "D"}
        ]
    }
]

# –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∑–º—ñ–Ω)
RESULTS = {
    "A": {
        "name": "üß† –ú–∏—Å–ª–∏—Ç–µ–ª—å",
        "shadow": """üî≤ *–°—Ç–∞–Ω —Ç—ñ–Ω—ñ:*
–¢–∏ –≤—Å–µ –∞–Ω–∞–ª—ñ–∑—É—î—à. –¢–≤—ñ–π —Ä–æ–∑—É–º ‚Äî —è–∫ –ª—É–ø–∞, —è–∫–∞ –±–∞—á–∏—Ç—å –∫–æ–∂–Ω—É –¥–µ—Ç–∞–ª—å.
–ê–ª–µ —Å–∞–º–µ —Ü–µ —ñ –∑–∞–≤–∞–∂–∞—î: —Å—É–º–Ω—ñ–≤–∏, –ø–µ—Ä—Ñ–µ–∫—Ü—ñ–æ–Ω—ñ–∑–º, —Ä–æ–∑–¥—É–º–∏ –±–µ–∑ –¥—ñ—ó.
–¢–∏ –Ω–µ –≤—ñ–¥—á—É–≤–∞—î—à —Ä—É—Ö—É ‚Äî –±–æ –±–æ—ó—à—Å—è –ø–æ–º–∏–ª–∫–∏.""",
        "power": """üü© *–°—Ç–∞–Ω —Å–∏–ª–∏:*
–¢–∏ ‚Äî –∞—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä —ñ–¥–µ–π. –¢–∞–º, –¥–µ —ñ–Ω—à—ñ –≤—Ç—Ä–∞—á–∞—é—Ç—å –æ—Ä—ñ—î–Ω—Ç–∏—Ä ‚Äî —Ç–∏ –±–∞—á–∏—à –∫–∞—Ä—Ç—É.
–¢–≤–æ—è —Å–∏–ª–∞ ‚Äî —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —è—Å–Ω—ñ—Å—Ç—å. –¢–≤–æ—è –≥–ª–∏–±–∏–Ω–∞ ‚Äî –¥–∞—Ä –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —à—É–∫–∞—î –∑–º—ñ—Å—Ç—É.
–ö–æ–ª–∏ —Ç–∏ –¥—ñ—î—à ‚Äî —Å–≤—ñ—Ç —Å—Ç–∞—î –ª–æ–≥—ñ—á–Ω–∏–º.""",
        "solution": """üéØ *–†—ñ—à–µ–Ω–Ω—è:*
–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É —Å–ø—Ä–∞–≤—É, —è–∫–∞ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è —Ç–µ–±–µ.
–Ü –¥–æ–∑–≤–æ–ª—å —Å–æ–±—ñ –∑—Ä–æ–±–∏—Ç–∏ —ó—ó –Ω–µ—ñ–¥–µ–∞–ª—å–Ω–æ ‚Äî –∞–ª–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏.
–¢–≤–æ—è —Å–≤–æ–±–æ–¥–∞ ‚Äî —É —Ä—É—Å—ñ."""
    },
    "B": {
        "name": "üî• –î—ñ—è—á",
        "shadow": """üî≤ *–°—Ç–∞–Ω —Ç—ñ–Ω—ñ:*
–¢–∏ –∑–≤–∏–∫ –¥—ñ—è—Ç–∏, –ø—Ä–æ–±–∏–≤–∞—Ç–∏, –¥–æ—Å—è–≥–∞—Ç–∏. –ê–ª–µ —Å–∞–º–µ —Ü–µ —ñ–Ω–æ–¥—ñ —Ç–µ–±–µ —Ä—É–π–Ω—É—î.
–¢–∏ –≤–∏–≥–æ—Ä—ñ–≤? –ê–±–æ –∑–∞–≥—É–±–∏–≤ —Å–µ–Ω—Å —É —à–≤–∏–¥–∫–æ—Å—Ç—ñ?
–ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –≤–æ—é—î—à –≤–∂–µ –Ω–µ –∑–∞ —Å–≤–æ—î.""",
        "power": """üü© *–°—Ç–∞–Ω —Å–∏–ª–∏:*
–¢–∏ ‚Äî –≤–æ–≥–æ–Ω—å. –¢–≤–æ—è –µ–Ω–µ—Ä–≥—ñ—è –∑–∞–ø–∞–ª—é—î —ñ–Ω—à–∏—Ö.
–¢–∏ –∑–¥–∞—Ç–µ–Ω —à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞–º, –¥–µ —ñ–Ω—à—ñ –ª–∏—à–µ –ø–ª–∞–Ω—É—é—Ç—å.
–ö–æ–ª–∏ —Ç–≤–æ—è –¥—ñ—è –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ ‚Äî —Ç–∏ —Å—Ç–∞—î—à –Ω–µ–ø–µ—Ä–µ–º–æ–∂–Ω–∏–º.""",
        "solution": """üéØ *–†—ñ—à–µ–Ω–Ω—è:*
–ó—É–ø–∏–Ω–∏—Å—å –Ω–∞ –º–∏—Ç—å. –ó–∞–ø–∏—Ç–∞–π —Å–µ–±–µ: ¬´–î–ª—è —á–æ–≥–æ —è —Ü–µ —Ä–æ–±–ª—é?¬ª
–ü–æ–≤–µ—Ä–Ω–∏—Å—å –¥–æ —Å–µ–Ω—Å—É ‚Äî —ñ —Ç–æ–¥—ñ –¥—ñ—ó –∑–Ω–æ–≤—É –ø–æ—á–Ω—É—Ç—å –¥–∞–≤–∞—Ç–∏ –∫–∞–π—Ñ."""
    },
    "C": {
        "name": "üé® –¢–≤–æ—Ä–µ—Ü—å",
        "shadow": """üî≤ *–°—Ç–∞–Ω —Ç—ñ–Ω—ñ:*
–¢–∏ –∂–∏–≤–µ—à –µ–º–æ—Ü—ñ—è–º–∏. –ê–ª–µ —Å–∞–º–µ –≤–æ–Ω–∏ —á–∞—Å–æ–º —Ç–µ–±–µ –ª–∞–º–∞—é—Ç—å.
–¢–∏ –Ω–∞–¥—Ç–æ –≥–ª–∏–±–æ–∫–æ –ø–µ—Ä–µ–∂–∏–≤–∞—î—à, —Å—É–º–Ω—ñ–≤–∞—î—à—Å—è, –≤—Ç—Ä–∞—á–∞—î—à —Ñ–æ–∫—É—Å.
–Ü —á–∞—Å—Ç–æ —á–µ–∫–∞—î—à —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É –¥–ª—è —Å—Ç–∞—Ä—Ç—É.""",
        "power": """üü© *–°—Ç–∞–Ω —Å–∏–ª–∏:*
–¢–∏ ‚Äî –¥–∂–µ—Ä–µ–ª–æ –∫—Ä–∞—Å–∏, —ñ–¥–µ–π —ñ —Å–µ–Ω—Å—É.
–¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –±–∞—á–∏—Ç–∏ –≥–ª–∏–±—à–µ ‚Äî —Ü–µ –Ω–µ –≤–∞–¥–∞, –∞ –¥–∞—Ä.
–¢–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–≤–æ—Ä–∏—à ‚Äî —Ç–∏ —Å—Ç–≤–æ—Ä—é—î—à –ø—Ä–æ—Å—Ç–æ—Ä–∏, –¥–µ –æ–∂–∏–≤–∞—î –¥—É—à–∞.""",
        "solution": """üéØ *–†—ñ—à–µ–Ω–Ω—è:*
–ù–µ —á–µ–∫–∞–π –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è ‚Äî —Å—Ç–≤–æ—Ä—é–π —Ä–∏—Ç—É–∞–ª –¥—ñ—ó.
–¢–≤–æ—è —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å ‚Äî —Ü–µ –Ω–µ —Å–º–µ—Ä—Ç—å —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ, –∞ —ó—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞."""
    },
    "D": {
        "name": "üß± –ë—É–¥—ñ–≤–Ω–∏–∫",
        "shadow": """üî≤ *–°—Ç–∞–Ω —Ç—ñ–Ω—ñ:*
–¢–∏ —Ç—Ä–∏–º–∞—î—à—Å—è –∑–∞ –∑–Ω–∞–π–æ–º–µ. –¶–µ –¥–∞—î —Å–ø–æ–∫—ñ–π, –∞–ª–µ –±–ª–æ–∫—É—î —Ä–æ–∑–≤–∏—Ç–æ–∫.
–ó–º—ñ–Ω–∏ –ª—è–∫–∞—é—Ç—å, –Ω–æ–≤–µ –∑–¥–∞—î—Ç—å—Å—è –∑–∞–≥—Ä–æ–∑–æ—é. –¢–∏ –∑—É–ø–∏–Ω—è—î—à —Å–µ–±–µ, –Ω–∞–≤—ñ—Ç—å –Ω–µ —É—Å–≤—ñ–¥–æ–º–ª—é—é—á–∏.""",
        "power": """üü© *–°—Ç–∞–Ω —Å–∏–ª–∏:*
–¢–∏ ‚Äî –æ–ø–æ—Ä–∞. –¢–∏ —Å—Ç–≤–æ—Ä—é—î—à —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞–º, –¥–µ —ñ–Ω—à—ñ –ø–∞–Ω—ñ–∫—É—é—Ç—å.
–ù–∞ —Ç–æ–±—ñ –º–æ–∂—É—Ç—å —Å—Ç–æ—è—Ç–∏ –ø—Ä–æ—î–∫—Ç–∏, —Å—Ç–æ—Å—É–Ω–∫–∏, —Ü—ñ–ª—ñ.
–¢–∏ –±—É–¥—É—î—à —Å–≤—ñ—Ç, —è–∫–∏–π –≤–∏—Ç—Ä–∏–º—É—î —á–∞—Å.""",
        "solution": """üéØ *–†—ñ—à–µ–Ω–Ω—è:*
–ó—Ä–æ–±–∏ –∫—Ä–æ–∫ —É –Ω–æ–≤–µ ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–π, –∞–ª–µ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π.
–î–æ—Å–≤—ñ–¥ –∑–º—ñ–Ω ‚Äî –Ω–µ –∑—Ä—É–π–Ω—É—î —Ç–µ–±–µ. –í—ñ–Ω –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –º—ñ—Ü–Ω—ñ—à–∏–º."""
    }
}

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–∏ —Ä—ñ–≤–Ω–æ—Å—Ç—ñ
TIE_BREAKER_QUESTIONS = {
    ("A", "B"): {
        "text": "‚ùì –©–æ —Ç–æ–±—ñ –±–ª–∏–∂—á–µ —Å–∞–º–µ –∑–∞—Ä–∞–∑?",
        "options": [
            {"text": "üß† –ó—Ä–æ–∑—É–º—ñ—Ç–∏, —è–∫ —É—Å–µ –ø—Ä–∞—Ü—é—î, —â–æ–± –¥—ñ—è—Ç–∏ –∑ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é", "type": "A"},
            {"text": "üî• –ó—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫, –Ω–∞–≤—ñ—Ç—å –Ω–µ –∑–Ω–∞—é—á–∏ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π", "type": "B"}
        ]
    },
    ("A", "C"): {
        "text": "‚ùì –©–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ—à–µ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "options": [
            {"text": "üß© –í—ñ–¥—á—É—Ç–∏, —â–æ –≤—Å–µ –ª–æ–≥—ñ—á–Ω–æ —ñ –Ω–∞ —Å–≤–æ—ó—Ö –º—ñ—Å—Ü—è—Ö", "type": "A"},
            {"text": "üé® –ü–µ—Ä–µ–¥–∞—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω —á–µ—Ä–µ–∑ –¥—ñ—é –∞–±–æ —Ç–≤–æ—Ä—á—ñ—Å—Ç—å", "type": "C"}
        ]
    },
    ("A", "D"): {
        "text": "‚ùì –Ø–∫–∞ –¥—É–º–∫–∞ —Ç–µ–±–µ –±—ñ–ª—å—à–µ –∑–∞—Å–ø–æ–∫–æ—é—î?",
        "options": [
            {"text": "üìê \"–Ø –≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–≤ ‚Äî —ñ –º–æ–∂—É —Ü–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏\"", "type": "A"},
            {"text": "üß± \"–Ø –≤ –±–µ–∑–ø–µ—Ü—ñ ‚Äî –≤—Å–µ —Å—Ç–∞–±—ñ–ª—å–Ω–æ —ñ –∑—Ä–æ–∑—É–º—ñ–ª–æ\"", "type": "D"}
        ]
    },
    ("B", "C"): {
        "text": "‚ùì –Ø–∫ —Ç–∏ –±—ñ–ª—å—à–µ –ª—é–±–∏—à –ø–æ—á–∏–Ω–∞—Ç–∏ —Å–ø—Ä–∞–≤—É?",
        "options": [
            {"text": "üî• –ü—Ä–æ—Å—Ç–æ –±–µ—Ä—É—Å—å —ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–∑–±–∏—Ä–∞—é—Å—å", "type": "B"},
            {"text": "üí≠ –ß–µ–∫–∞—é, –∫–æ–ª–∏ –∑'—è–≤–∏—Ç—å—Å—è –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –∞–±–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø–æ—à—Ç–æ–≤—Ö", "type": "C"}
        ]
    },
    ("B", "D"): {
        "text": "‚ùì –©–æ –¥–ª—è —Ç–µ–±–µ –≤–∞–∂–ª–∏–≤—ñ—à–µ –≤ —Å–∫–ª–∞–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç?",
        "options": [
            {"text": "üí™ –í–∑—è—Ç–∏ –Ω–∞ —Å–µ–±–µ —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤—É —ñ –∑–º—ñ–Ω–∏—Ç–∏ —Å–∏—Ç—É–∞—Ü—ñ—é", "type": "B"},
            {"text": "üßò‚Äç‚ôÇÔ∏è –î–æ–≤—ñ—Ä–∏—Ç–∏—Å—å –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ–º—É —à–ª—è—Ö—É —ñ –Ω–µ –ø–æ—Å–ø—ñ—à–∞—Ç–∏", "type": "D"}
        ]
    },
    ("C", "D"): {
        "text": "‚ùì –©–æ –±—ñ–ª—å—à–µ —Ç–æ–±—ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?",
        "options": [
            {"text": "üé≠ –°–≤–æ–±–æ–¥–∞, –∑–º—ñ–Ω–∞, –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏", "type": "C"},
            {"text": "üß± –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å, —á—ñ—Ç–∫—ñ—Å—Ç—å, –ø–æ—Ä—è–¥–æ–∫", "type": "D"}
        ]
    }
}

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
# –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Redis, PostgreSQL)
# –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π, –æ—Å–∫—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ.
user_sessions: Dict[int, 'UserSession'] = {}

class UserSession:
    """–ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–≤—ñ–∑—É."""
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.current_question = 0
        self.answers: List[str] = []
        self.tie_breaker_needed = False
        self.tie_breaker_types = None
        self.final_result: str | None = None # –î–æ–¥–∞–Ω–æ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Application –¥–ª—è python-telegram-bot
# Application —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ, —â–æ–± –π–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –¥–æ–¥–∞—Ç–∫—É.
# –í—ñ–Ω –±—É–¥–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫–æ—é –≤—Å—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram.
application = Application.builder().token(BOT_TOKEN).build()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∫–æ–ª–±–µ–∫—ñ–≤ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è."""
    user_id = update.effective_user.id
    user_sessions[user_id] = UserSession(user_id)
    
    welcome_text = """üëã –í—ñ—Ç–∞—é —Ç–µ–±–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ–π –≥—Ä—ñ-–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—Ü—ñ ¬´–°–ò–°–¢–ï–ú–ê –Ø–î–ï–†¬ª.

–¶–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç. –¶–µ ‚Äî –¥–∑–µ—Ä–∫–∞–ª–æ —Ç–≤–æ—î—ó –ø—Ä–∏—Ä–æ–¥–∏.

üîê –£ —Ç–µ–±–µ —î 7 –∫—Ä–æ–∫—ñ–≤. –ó–∞ –∫–æ–∂–µ–Ω ‚Äî —Ç–∏ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏–º–µ—à –æ—Å—å –Ω–æ–≤–µ –ø—Ä–æ —Å–µ–±–µ.

üéØ –£ —Ñ—ñ–Ω–∞–ª—ñ –æ—Ç—Ä–∏–º–∞—î—à: —Å–≤—ñ–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –¥–≤–∏–≥—É–Ω + –æ—Å–æ–±–∏—Å—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é.

üñ§ –í–∞–∂–ª–∏–≤–æ: —Ü—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–ª—è –≤—Å—ñ—Ö. –õ–∏—à–µ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ –ø–æ–±–∞—á–∏—Ç–∏ —Å–µ–±–µ –±–µ–∑ –º–∞—Å–∫–∏ —Ç–∞ –ø—Ä–∏–∫—Ä–∞—Å.

–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Ö—Ç–æ —Ç–∏:
‚Ä¢ **–ú–∏—Å–ª–∏—Ç–µ–ª—å**
‚Ä¢ **–î—ñ—è—á** ‚Ä¢ **–¢–≤–æ—Ä–µ—Ü—å**
‚Ä¢ **–ë—É–¥—ñ–≤–Ω–∏–∫**"""
    
    keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏", callback_data="start_quiz")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer() # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
    
    user_id = query.from_user.id
    data = query.data
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Å–µ—Å—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id)
    
    session = user_sessions[user_id]
    
    if data == "start_quiz":
        await send_question(query, session)
    elif data.startswith("answer_"):
        answer_type = data.split("_")[1]
        session.answers.append(answer_type)
        session.current_question += 1
        
        if session.current_question < len(QUESTIONS):
            await send_question(query, session)
        else:
            await process_results(query, session)
    elif data.startswith("tie_"):
        answer_type = data.split("_")[1]
        session.answers.append(answer_type)
        await process_results(query, session)
    elif data == "get_pdf":
        await send_pdf_result(query, session, context)
    elif data == "book_session":
        await send_booking_info(query)

async def send_question(query: CallbackQuery, session: UserSession):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–≤—ñ–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ."""
    question = QUESTIONS[session.current_question]
    
    keyboard = []
    for option in question["options"]:
        keyboard.append([InlineKeyboardButton(
            option["text"], 
            callback_data=f"answer_{option['type']}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=question["text"],
        reply_markup=reply_markup
    )

async def process_results(query: CallbackQuery, session: UserSession):
    """–û–±—Ä–æ–±–ª—è—î –∑—ñ–±—Ä–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è."""
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    counts = {"A": 0, "B": 0, "C": 0, "D": 0}
    for answer in session.answers:
        counts[answer] += 1
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    max_count = 0
    if counts:
        max_count = max(counts.values())
    
    winners = [k for k, v in counts.items() if v == max_count and max_count > 0]
    
    if len(winners) == 1:
        # –Ñ —è–≤–Ω–∏–π –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å
        result_type = winners[0]
        await send_final_result(query, session, result_type)
    else:
        # –ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—â–æ —î 2 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ
        if len(winners) == 2:
            tie_key = tuple(sorted(winners))
            if tie_key in TIE_BREAKER_QUESTIONS:
                await send_tie_breaker_question(query, session, tie_key)
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó, –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                result_type = winners[0]
                await send_final_result(query, session, result_type)
        else:
            # –ë—ñ–ª—å—à–µ 2 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é - –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π (–∞–±–æ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É)
            result_type = winners[0]
            await send_final_result(query, session, result_type)

async def send_tie_breaker_question(query: CallbackQuery, session: UserSession, tie_types: tuple):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–∏ —Ä—ñ–≤–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤."""
    session.tie_breaker_types = tie_types
    question = TIE_BREAKER_QUESTIONS[tie_types]
    
    keyboard = []
    for option in question["options"]:
        keyboard.append([InlineKeyboardButton(
            option["text"], 
            callback_data=f"tie_{option['type']}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=question["text"],
        reply_markup=reply_markup
    )

async def send_final_result(query: CallbackQuery, session: UserSession, result_type: str):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ."""
    result = RESULTS[result_type]
    
    result_text = f"""üß¨ **–¢–≤—ñ–π —Ç–∏–ø: {result['name']}**

{result['shadow']}

{result['power']}

{result['solution']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üß¨ –¢–≤—ñ–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –¥–≤–∏–≥—É–Ω –≤–∏–∑–Ω–∞—á–µ–Ω–æ.

–¶–µ –±—É–ª–æ –ª–∏—à–µ 5% –≤—ñ–¥ —Ç–æ–≥–æ, —â–æ –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Å–µ–±–µ.

üß† –ó–∞ 10 —Ö–≤–∏–ª–∏–Ω —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:
‚Äî –ü–æ–±–∞—á–∏—Ç–∏, —â–æ —Ä–µ–∞–ª—å–Ω–æ —Ç–µ–±–µ –±–ª–æ–∫—É—î
‚Äî –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–æ—Å—Ç—É –¥—ñ—é, —è–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–º—ñ–Ω–∏
‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ —è—Å–Ω—ñ—Å—Ç—å, —è–∫—É –Ω–µ –¥–∞—Å—Ç—å –∂–æ–¥–µ–Ω —Ç–µ—Å—Ç

üîí –¶–µ –±—É–¥–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞ —Ä–æ–∑–º–æ–≤–∞. –ë–µ–∑ –≤–æ–¥–∏. –ë–µ–∑ –∫–æ—É—á–∏–Ω–≥—É. –õ–∏—à–µ —Å—É—Ç—å."""
    
    keyboard = [
        [InlineKeyboardButton("üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ PDF-–ø–∞–º—è—Ç–∫—É", callback_data="get_pdf")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", url=CONSULTATION_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—ñ—ó
    session.final_result = result_type
    
    await query.edit_message_text(
        text=result_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def send_pdf_result(query: CallbackQuery, session: UserSession, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä—É—î PDF –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –π–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ."""
    if not hasattr(session, 'final_result') or session.final_result is None:
        await query.answer("–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ç–µ—Å—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ PDF!")
        return

    result = RESULTS[session.final_result]

    # –°—Ç–≤–æ—Ä—é—î–º–æ PDF —É –ø–∞–º'—è—Ç—ñ
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)

    styles = getSampleStyleSheet()
    title_style = styles['Title']
    normal_style = styles['BodyText']

    story = []

    story.append(Paragraph("üß¨ –°–ò–°–¢–ï–ú–ê –Ø–î–ï–† ‚Äî –†–ï–ó–£–õ–¨–¢–ê–¢", title_style))
    story.append(Spacer(1, 12))

    story.append(Paragraph(f"üîπ –¢–≤—ñ–π —Ç–∏–ø: {result['name']}", normal_style))
    story.append(Spacer(1, 12))

    # –ó–∞–º—ñ–Ω—é—î–º–æ markdown –∑—ñ—Ä–æ—á–∫–∏ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è PDF
    story.append(Paragraph(result['shadow'].replace("*", ""), normal_style))
    story.append(Spacer(1, 12))

    story.append(Paragraph(result['power'].replace("*", ""), normal_style))
    story.append(Spacer(1, 12))

    story.append(Paragraph(result['solution'].replace("*", ""), normal_style))

    doc.build(story)
    buffer.seek(0) # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –±—É—Ñ–µ—Ä–∞

    await query.message.reply_document(document=buffer, filename="rezultat.pdf")
    
    await query.answer("PDF –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")

async def send_booking_info(query: CallbackQuery):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é."""
    booking_text = f"""üóì **–ó–∞–ø–∏—Å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —Å–µ—Å—ñ—é**

–î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ 10-—Ö–≤–∏–ª–∏–Ω–Ω—É —Ä–æ–∑–º–æ–≤—É, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:

üîó {CONSULTATION_LINK}

–ê–±–æ –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç, —ñ –º–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.

üîí –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –ø–æ–≤–Ω—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å —Ç–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥."""
    
    keyboard = [[InlineKeyboardButton("üöÄ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –∑–∞—Ä–∞–∑", url=CONSULTATION_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=booking_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏, —â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å."""
    logger.error(f"–í–∏–Ω—è—Ç–æ–∫ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {context.error}", exc_info=True)
    # –ú–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ
    if isinstance(update, Update) and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ: {e}")

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ application –ü–Ü–°–õ–Ø –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_error_handler(error_handler)


# Flask –º–∞—Ä—à—Ä—É—Ç–∏
@app.route('/', methods=['GET'])
def index():
    """–ü—Ä–æ—Å—Ç–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É."""
    return jsonify({'status': '–û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î!', 'webhook': '–∞–∫—Ç–∏–≤–Ω–∏–π'})

@app.route(f'/webhook/{BOT_TOKEN}', methods=['POST'])
def webhook():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Ö—ñ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram."""
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update_dict = json.loads(json_string)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Update –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            # application.bot –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —ñ –¥–æ—Å—Ç—É–ø–Ω–æ
            update = Update.de_json(update_dict, application.bot)
            
            # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É Application.
            # put_nowait() –Ω–µ –±–ª–æ–∫—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è Flask-–º–∞—Ä—à—Ä—É—Ç—É.
            application.update_queue.put_nowait(update)
            
            return jsonify({'status': 'ok'})
        else:
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –∑ –Ω–µ–≤—ñ—Ä–Ω–∏–º Content-Type.")
            return jsonify({'status': 'error', 'message': 'Content-Type –Ω–µ application/json'}), 400
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ webhook: {e}", exc_info=True) # exc_info=True –¥–ª—è –≤–∏–≤–æ–¥—É traceback
        return jsonify({'status': 'error', 'message': str(e)}), 500

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ Telegram
async def set_webhook_on_telegram_async(): # –ó—Ä–æ–±–ª–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—é
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î webhook –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ Telegram, –≤–∫–∞–∑—É—é—á–∏ URL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å."""
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}"
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ application.bot –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
        # –¶–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫, —Ç–æ–º—É –π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ.
        await application.bot.set_webhook(url=webhook_url) # –¢–µ–ø–µ—Ä await
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
        print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")

# –ì–æ–ª–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Application –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ.
    # Application.start() –∑–∞–ø—É—Å–∫–∞—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å.
    # –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.new_event_loop() —Ç–∞ loop.run_forever()
    # –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π Application –º—ñ–≥ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ,
    # –Ω–µ –±–ª–æ–∫—É—é—á–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ Flask.
    
    def run_telegram_app_in_thread():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î Application —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î webhook –≤ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—ñ –ø–æ–¥—ñ–π –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Application –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        loop.run_until_complete(application.initialize()) 
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Application.start() –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop.run_until_complete(application.start())

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É Application
        loop.run_until_complete(set_webhook_on_telegram_async()) # –¢–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –ø–æ–¥—ñ–π, —â–æ–± Application –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞–≤ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
        # —ñ –æ–±—Ä–æ–±–ª—è—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏.
        loop.run_forever() 

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–ª—è Telegram Application
    telegram_thread = threading.Thread(target=run_telegram_app_in_thread)
    telegram_thread.daemon = True # –î–æ–∑–≤–æ–ª—è—î –ø–æ—Ç–æ–∫—É –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—å, –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫
    telegram_thread.start()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    # Render –Ω–∞–¥–∞—î –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ 'PORT'.
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 5000, —è–∫—â–æ –∑–º—ñ–Ω–Ω–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

